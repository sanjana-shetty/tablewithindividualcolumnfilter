import { Component, OnInit, Output, EventEmitter, ViewChild } from '@angular/core';
import { MatTableDataSource, MatPaginator } from '@angular/material';
import { SelectionModel } from "@angular/cdk/collections";
import { FormControl } from '@angular/forms';
import { AdministratorService } from '../administrator.service';

// export interface PeriodicElement {
//   employeeName: string;
//   employeeId: number;
//   email:string;
//   grade: number;
//   designation:string;
//   location: string;
//   shortTermStatus:string;
//   longTermStatus:string;
//   mentorName:string;
// }
// ];

@Component({
  selector: 'app-broadcast-tableview',
  templateUrl: './broadcast-tableview.component.html',
  styleUrls: ['./broadcast-tableview.component.scss']
})
export class BroadcastTableviewComponent implements OnInit {
  displayedColumns: string[] = [ 
    "select"  ,
    "employeeName",
    "employeeId",
    "email",
    "designation",
    "grade",
    "location",
    "shortTermStatus",
    "longTermStatus",
    "mentorName",
  ];
  dataSource = new MatTableDataSource<any>();
  selection = new SelectionModel<any>(true, []);
  nameFilter = new FormControl();
  empIDFilter = new FormControl();
  emailIDFilter = new FormControl();
  designationFilter = new FormControl();
  gradeFilter = new FormControl();
  locationFilter = new FormControl();
  STGSFilter = new FormControl();
  LTGSFilter = new FormControl();
  mentornameFilter = new FormControl();
  filteredValues = { employeeId:'',employeeName:'',grade:'',location:'', designation:'' , email:'',mentorName:'',shortTermStatus:'',longTermStatus:''};
  nameList: any;
  ELEMENT_DATA: any;
  empIDList: any[];
  emailIDList: any[];
  designList: any[];
  gradeList: any[];
  lcnList: any[];
  STGSList: any[];
  mentornameList: any[];
  LTGSList: any[];
  selected: string;
  actualData: any[];
  @Output() selectedRowData = new EventEmitter<any>();
  // @Output() flag = new EventEmitter<any>();
  @Output() modalflag = new EventEmitter<any>();
  selectedName: any;
  selectedMN: any;
  selectedID: any;
  selectedEmailID: any;
  selectedDesgn: any;
  selectedGrade: any;
  selectedlocn: any;
  selectedSTGS: any;
  selectedLTGS: any;
  selectionAmount: number;
  isAllSelected: boolean;
  selectedTotalRow: number;

  
  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;
  // enableBtn: boolean=false;
  constructor( private adminService:AdministratorService) {

  
  }

  ngOnInit() {
    
    this.getBroadCastTableData();
    this.getFilterDropDownList();
    this.getFilterChangedData();
  }

  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
  
  }


  getBroadCastTableData() {

    // this.ELEMENT_DATA= [
    //   {  employeeName: "Hydrogen", employeeId: 10079,email:"sanj@888",designation:"SSE",grade: 1, location: "Hyd",shortTermStatus:"Draft",longTermStatus:"In Progress",mentorName:"Kevin" },
    //   { employeeName: "Helium", employeeId: 40026,email:"sanj@888",designation:"SSE" , grade: 2,location: "Hubli",shortTermStatus:"Approved",longTermStatus:"Draft",mentorName:"Biswa" },
    //   { employeeName: "Lithium", employeeId: 6941,email:"sanj@888",designation:"TL",  grade: 3,location: "Bangalore",shortTermStatus:"In Progress" ,longTermStatus:"Approved" ,mentorName:"Pooja"},
    //   {  employeeName: "Helium", employeeId: 90122,email:"sanj@888",designation:"SSE",grade: 4, location: "Bangalore" ,shortTermStatus:"Draft",longTermStatus:"Draft",mentorName:"Rupa" },
    //   {  employeeName: "Boron", employeeId: 10811,email:"sanj@888" ,designation:"PM",grade: 5,location: "Bangalore",shortTermStatus:"Approved" ,longTermStatus:"In Progress",mentorName:"Rony" },
    //   {  employeeName: "Helium1", employeeId: 90122,email:"sanj@888",designation:"SSE",grade: 4, location: "Bangalore" ,shortTermStatus:"Draft",longTermStatus:"Draft",mentorName:"Rupa" },
    // ];
    let ParamDetails = {
        
      "loginId":sessionStorage.getItem('idpEmployeeId'),
      
    }

    this.adminService.GetCandidateDetails(ParamDetails).subscribe(
      res => {
        if(res.length>0){
          this.ELEMENT_DATA=res
        //    this.ELEMENT_DATA.forEach((e) => {
        //     delete e.idpAssessmentId;
        //     delete e.idpAssessmentWorkflowId;
        //     delete e.managerName;
        //     delete e.matrixManager;
        // }
        // );
       
          
        this.dataSource = new MatTableDataSource<any>(this.ELEMENT_DATA);
    
        this.dataSource.paginator = this.paginator;
        this.actualData=this.dataSource.data;
        this.getFilterDropDownList();
       
       
        }

    }  )
    

    
    

  }


  getFilterDropDownList(){

    var nameValue = [];
    var empIDValue = [];
    var emailIDValue = [];
    var designationValue = [];
    var gradeValue = [];
    var locationValue = [];
    var STGSValue = [];
    var LTGSValue = [];
    var mentornameValue = [];
    if(this.ELEMENT_DATA && this.ELEMENT_DATA.length>0){
      for (let i = 0; i < this.ELEMENT_DATA.length; i++) {
       
        nameValue.push(this.ELEMENT_DATA[i].employeeName);
        empIDValue.push(this.ELEMENT_DATA[i].employeeId);
        emailIDValue.push(this.ELEMENT_DATA[i].email);
        designationValue.push(this.ELEMENT_DATA[i].designation);
        gradeValue.push(this.ELEMENT_DATA[i].grade);
        locationValue.push(this.ELEMENT_DATA[i].location);
        STGSValue.push(this.ELEMENT_DATA[i].shortTermStatus);
        LTGSValue.push(this.ELEMENT_DATA[i].longTermStatus);
        mentornameValue.push(this.ELEMENT_DATA[i].mentorName);
       
      }
    }
  
    function onlyUnique(value, index, self) { 
      return self.indexOf(value) === index;
  }
  
    this.nameList=nameValue.filter( onlyUnique )
    this.empIDList= empIDValue.filter( onlyUnique )
    this.emailIDList= emailIDValue.filter( onlyUnique )
    this.designList= designationValue.filter( onlyUnique )
    this.gradeList= gradeValue.filter( onlyUnique )
    this.lcnList= locationValue.filter( onlyUnique )
    this.STGSList= STGSValue.filter( onlyUnique )
    this.LTGSList= LTGSValue.filter( onlyUnique )
    this.mentornameList= mentornameValue.filter( onlyUnique )

    this.getFilterChangedData();
  }

 getFilterChangedData(){

   
    this.nameFilter.valueChanges.subscribe((nameFilterValue) => {
      this.dataSource.data=this.actualData
      this.filteredValues['employeeName'] = nameFilterValue;
      this.selectedName=nameFilterValue;
      this.dataSource.filter = JSON.stringify(this.filteredValues);
   
      //  console.log(this.dataSource['_renderData']._value)
    });

    this.empIDFilter.valueChanges.subscribe((empIDFilterFilterValue)=> {
      this.dataSource.data=this.actualData
      this.filteredValues['employeeId'] = empIDFilterFilterValue;
      this.selectedID=empIDFilterFilterValue;
      this.dataSource.filter = JSON.stringify(this.filteredValues);
      });

      this.emailIDFilter.valueChanges.subscribe((emailIDFilterValue) => {
        this.dataSource.data=this.actualData
        this.filteredValues['email'] = emailIDFilterValue;
        this.selectedEmailID=emailIDFilterValue;
        this.dataSource.filter = JSON.stringify(this.filteredValues);
        }); 
      

    this.designationFilter.valueChanges.subscribe((designationFilterValue) => {
      this.dataSource.data=this.actualData
      this.filteredValues['designation'] = designationFilterValue;
      this.selectedDesgn=designationFilterValue;
      this.dataSource.filter = JSON.stringify(this.filteredValues);
    });

    this.gradeFilter.valueChanges.subscribe((gradeFilterValue) => {

      this.dataSource.data=this.actualData
      this.filteredValues['grade'] = gradeFilterValue;
      this.selectedGrade=gradeFilterValue;
      this.dataSource.filter = JSON.stringify(this.filteredValues);
      console.log(this.dataSource.filter) 
    
    });

    this.locationFilter.valueChanges.subscribe((locationFilterValue)        => {
      this.dataSource.data=this.actualData
      this.filteredValues['location'] = locationFilterValue;
      this.selectedlocn=locationFilterValue;
      this.dataSource.filter = JSON.stringify(this.filteredValues);
      });

      this.STGSFilter.valueChanges.subscribe((STGSFilterrValue)        => {
        this.dataSource.data=this.actualData
        this.filteredValues['shortTermStatus'] = STGSFilterrValue;
        this.selectedSTGS=STGSFilterrValue;
        this.dataSource.filter = JSON.stringify(this.filteredValues);
        }); 
      

    this.LTGSFilter.valueChanges.subscribe((LTGSFilterValue) => {
      this.dataSource.data=this.actualData
      this.filteredValues['longTermStatus'] = LTGSFilterValue;
      this.selectedLTGS=LTGSFilterValue;
      this.dataSource.filter = JSON.stringify(this.filteredValues);
    });

    this.mentornameFilter.valueChanges.subscribe((mentornameFilterValue) => {
      this.dataSource.data=this.actualData
      this.filteredValues['mentorName'] = mentornameFilterValue;
      this.selectedMN=mentornameFilterValue;
      this.dataSource.filter = JSON.stringify(this.filteredValues);
    });

  this.dataSource.filterPredicate = this.customFilterPredicate();

 }


 customFilterPredicate() {
  const myFilterPredicate = function(data:any, filter:string) :boolean {
    console.log(data.grade)
    console.log(JSON.parse(filter),'filter')
    let searchString = JSON.parse(filter);
 

 
    let nameFound = data.employeeName?(((data.employeeName.toString().trim().toLowerCase().indexOf(searchString.employeeName.toString().trim().toLowerCase()) !== -1) && (data.employeeName.toString().trim().length==searchString.employeeName.toString().trim().length))|| (searchString.employeeName.toString()=='')):true
    let empIDFound = data.employeeId?(((data.employeeId.toString().trim().indexOf(searchString.employeeId) !== -1) && (data.employeeId.toString().trim().length==searchString.employeeId.toString().length)) || (searchString.employeeId.toString()=='')):true
    let designationFound = data.designation?(((data.designation.toString().trim().toLowerCase().indexOf(searchString.designation.toLowerCase()) !== -1) && (data.designation.toString().trim().length==searchString.designation.toString().trim().length) ) ||(searchString.designation.toString()=='')):true
    let gradeFound =data.grade.toString()?(((data.grade.toString().trim().indexOf(searchString.grade.toString()) !== -1) && (data.grade.toString().trim().length==searchString.grade.toString().trim().length) ) ||(searchString.grade.toString()=='')):true
    let locationFound =data.location?(data.location.toString().trim().toLowerCase().indexOf(searchString.location.toLowerCase()) !== -1):true
    // let locationFound = data.location.toString().trim().toLowerCase().indexOf(searchString.location.toLowerCase()) !== -1
    let STGSFound =data.shortTermStatus?(((data.shortTermStatus.toString().trim().toLowerCase().indexOf(searchString.shortTermStatus.toLowerCase()) !== -1) && (data.shortTermStatus.toString().trim().length==searchString.shortTermStatus.toString().trim().length) ) ||(searchString.shortTermStatus.toString()=='')):true
    let LTGSFound = data.longTermStatus?(((data.longTermStatus.toString().trim().toLowerCase().indexOf(searchString.longTermStatus.toLowerCase()) !== -1) && (data.longTermStatus.toString().trim().length==searchString.longTermStatus.toString().trim().length) ) ||(searchString.longTermStatus.toString()=='')):true
    let mentornameFound = data.mentorName?(((data.mentorName.toString().trim().toLowerCase().indexOf(searchString.mentorName.toLowerCase()) !== -1) && (data.mentorName.toString().trim().length==searchString.mentorName.toString().trim().length) ) ||(searchString.mentorName.toString()=='')):true

    if (searchString.topFilter) {
     
        return nameFound || empIDFound || designationFound ||gradeFound || locationFound ||STGSFound ||LTGSFound || mentornameFound
    } else {
     
        return nameFound && empIDFound && designationFound && gradeFound && locationFound && STGSFound && LTGSFound && mentornameFound
    }
  }

  return myFilterPredicate;
  
}

  // Reset table filters
  resetFilters() {
    this.filteredValues = { employeeId:'',employeeName:'',grade:'',location:'', designation:'' , email:'',mentorName:'',shortTermStatus:'',longTermStatus:''};
    this.selectedName=undefined;
    this.selectedMN=undefined;
    this.selectedID=undefined;
    this.selectedEmailID=undefined;
    this.selectedDesgn=undefined;
    this.selectedGrade=undefined;
    this.selectedlocn=undefined;
    this.selectedSTGS=undefined;
    this.selectedLTGS=undefined;
    this.dataSource.filter = "";
     this.dataSource.data=this.actualData;
    // console.log(this.selection.selected,'selected');
  }

//filter logic ends


  /** Whether the number of selected elements matches the total number of rows. */
  // isAllSelected($event) {
  //   this.dataSource.data=this.dataSource.filteredData
  //   const numSelected = this.selection.selected.length;
  //   console.log(this.selection.selected.includes( this.dataSource.data ),'existttt')
  //   const numRows = this.dataSource.data.length;
  //   return numSelected === numRows;
  // }

 

  masterToggle($event) {
    if ($event.checked) {
   console.log('checkeddd')
      this.selectRows() 
      // this.onCompleteRow(this.dataSource);
    }else{
      this.deselectRows()
      console.log('uncheckeddd')
    }
    
    // this.isAllSelected($event)
    //   ? this.deselectRows()
    //   : this.selectRows() ;


      // if(this.isAllSelected($event)){
      //   if(this.selection.selected.length!=0){
      //     alert(this.selection.selected.length)
      //     // alert(this.selection.selected.length)
      //     this.selectedRowData.emit(this.selection.selected)
      //   }
      // }else{
      //   alert("jfchdfk")
      //   if(this.selection.selected.length!=0){
      //     // this.selection.deselect(row)
      //     alert(this.selection.selected.length)
      //     // alert(this.selection.selected.length)
      //     this.selectedRowData.emit(this.selection.selected)
      //   }
      //   else{
      //     alert(this.selection.selected.length+'dkshfd')

      //   }
      // }
      
  }

  selectRows() {
    this.isAllSelected=true;
    for (let index = 0; index < this.dataSource.filteredData.length ; index++) {
      this.selection.select(this.dataSource.filteredData[index]);
      console.log(this.dataSource.filteredData[index],'selectttt')
      // this.selectionAmount = this.selection.selected.length;
    }
    this.selectedTotalRow=this.selection.selected.length
    // this.flag.emit(false)

  }

  deselectRows() {
    this.isAllSelected=false;
    for (let index = 0; index < this.dataSource.filteredData.length; index++) {
      this.selection.deselect(this.dataSource.filteredData[index]);
      console.log(this.dataSource.filteredData[index],'deselectttt')
      // this.selectionAmount = this.selection.selected.length;
    }
    this.selectedTotalRow=this.selection.selected.length
    //  this.flag.emit(false)
  }
  
  private selectRow($event, dataSource) {
    console.log($event,this.selection.selected,"checkked")
    // console.log($event.checked);
    if ($event.checked) {
      if(this.selection.selected.length>=0){
        this.selectedTotalRow=this.selection.selected.length+1
        // alert(this.selection.selected.length)
      //  this.flag.emit(false)
      }
    }else{
      if(this.selection.selected.length>=0){
        this.selectedTotalRow=this.selection.selected.length-1
        // alert(this.selection.selected.length)
        // this.flag.emit(false)
      }
      
    }
  }
 
  // onCompleteRow(dataSource) {

  //   dataSource.data.forEach(element => {
  //     console.log(element);
  //   });

  // }
  selectedList(nextFlag){
    this.filteredValues =  { employeeName:'', employeeId:'', email:'', designation:'' ,grade:'',location:'',shortTermStatus:'',longTermStatus:'',mentorName:''};

    this.dataSource.filter = "";
    this.dataSource.data=this.actualData;

   if(this.selection.selected.length!=0){
    this.modalflag.emit(nextFlag)
    this.selectedRowData.emit(this.selection.selected)
    
  }else{
    alert("Please select an employee")
  }
  }

}
